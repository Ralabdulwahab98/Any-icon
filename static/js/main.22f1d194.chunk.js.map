{"version":3,"sources":["components/HistoryList.js","components/HistoryContainer.js","components/ResultBox.js","components/SearchResult.js","components/UserAccount.js","components/UserLoginContainer.js","components/UserRegisterContainer.js","components/UsersContainer.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["HistoryList","props","className","onClick","onCloseItemClick","oneList","HistoryContainer","allHistoryList","this","historyList","map","task","index","key","closeClick","React","Component","ResultBox","state","onRemoveData","href","img","target","src","alt","SearchResult","allData","DATA","item","tags","raster_sizes","length","formats","preview_url","format","UserAccount","nameChange","e","setState","newItem","value","toggleEdit","onClickSave","console","log","username","editUser","history","type","placeholder","onChange","UserLoginContainer","usrnameInputChange","usrnameInput","passwordInputChange","passwordInput","checkUser","preventDefault","userName","userPass","UsersBD","usrname","password","toggleLog","userPassed","userAccout","UserRegisterContainer","addUser","UsersContainer","userLoginClicked","toggleLogin","toggle","toggleRegister","userRegisterClicked","user","dataUsers","localStorage","setItem","JSON","stringify","oldName","newName","update","parse","getItem","Main","getData","data","url","axios","method","then","res","icons","catch","err","addItem","search","inputChange","closeItemClick","searchIndex","indexOf","splice","historyListClicked","toggleHistory","userListClicked","toggleUser","removeData","oneData","dataIndex","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.22f1d194.chunk.js","sourcesContent":["// HistoryList\nimport React from 'react';\n\n    export default function HistoryList (props) {\n\n   \n  return (\n    <div >\n        <li className=\"list-group-item\"> \n        <span className=\"glyphicon glyphicon-trash\"\n        onClick = {props.onCloseItemClick} >\n         </span>\n         \n        {props.oneList}  </li>\n    </div>\n  );}\n","import React from 'react';\nimport HistoryList from './HistoryList';\n\nexport default class HistoryContainer extends React.Component {\n\n\n    render() {\n        const allHistoryList = this.props.historyList.map((task, index) => {\n            return <HistoryList\n                oneList={task}\n                key={index}\n                onCloseItemClick={() => this.props.onCloseItemClick(task)}\n            />\n        });\n\n        \n\n        return (\n            <div className=\"div-HistoryContainer\" >\n                <ul className=\"d-inline-flex list-group\">\n                        <span className=\"clear-all\" onClick={this.props.closeClick} >\n                        clear all </span> \n                        <div className=\"history-item\">\n                            {allHistoryList}\n                        </div>\n               \n                </ul>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\n\nclass  ResultBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n    \n    render() { \n        return ( \n        <div className=\"ResultBox\">\n\n             <span className=\"glyphicon glyphicon-trash imgdlet\"\n            onClick = {this.props.onRemoveData} >\n            </span>\n\n            <a href={`${this.props.img}`} target=\"_blank\">\n            <div className=\"imgDiv\">\n                <img src={`${this.props.img}`} alt=\"icon of API data \" />\n            </div>\n            </a>\n\n\n            {/* -- TAGS just to complet the Requirements -- */}\n            \n            {/* <label>TAG:\n                <input  \n                type='text'\n                placeholder=' your search tag'\n                // value= {this.props.tags.join('-')} \n                // onChange= {this.props.tags.join('-')} \n                // readOnly= {this.props.tags.join('-')}\n                // defaultValue={this.props.tags.join('-')}\n                />\n                <span className=\"glyphicon glyphicon-check\"\n                // onClick = {this.props.onRemoveData} \n                ></span>\n            </label> */}\n            \n                \n\n           \n\n        </div> );\n    }\n}\n \nexport default ResultBox;","import React from 'react';\nimport ResultBox from './ResultBox';\nclass SearchResult extends React.Component {\n\n    render() { \n\n        const allData = this.props.DATA.map( (item, key) => {\n                return <ResultBox\n                    key={key} \n                    tags = {item.tags}\n                   img = {item.raster_sizes[item.raster_sizes.length-1].formats[0].preview_url}\n                   format = {item.raster_sizes[item.raster_sizes.length-1].formats[0].format}\n                   onRemoveData={() => this.props.onRemoveData(item)}\n                   />\n                 });\n\n        let checkArrayEmpty ;\n        if( this.props.DATA.length <= 0 ){\n            checkArrayEmpty = <div className=\"SearchResult Empty\">\n        </div>\n        }else{\n            checkArrayEmpty = <div className=\"SearchResult\">\n            {allData}\n        </div>\n        }\n        return(checkArrayEmpty);\n\n    }\n\n}\n \nexport default SearchResult;\n\n\n","import React from 'react';\n\n\nexport default class UserAccount extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            // oldUsername:'',\n            newItem: '',\n            toggleEdit:'none',\n\n        };\n    }\n\n    nameChange = (e) => { \n        this.setState({  newItem: e.target.value, });\n        // e.target.value=''   \n    }\n    onClick = (e) => {\n        this.setState({ toggleEdit:'display' }); \n    }\n    onClickSave = (e) => {\n        this.setState({ toggleEdit:'none' }); \n        \n        console.log( 'onClickSave' ,this.props.username , this.state.newItem)\n        this.props.editUser(this.props.username , this.state.newItem)\n    }\n\n\n\n\n    render() {\n        console.log('<UserAccount/> name= ', this.props.username)\n        console.log('<UserAccount/> tags =', this.props.history)\n        return (\n            <div className='UserAccount'>\n                <h1> Hi {this.props.username} </h1>\n                \n                    <p>Edit  <span className=\"glyphicon glyphicon-edit\"\n                    onClick = {this.onClick} ></span>\n                    </p>\n\n\n                 <div className={`div-Edit-${this.state.toggleEdit}`}>\n\n                    <input\n                        type='text'\n                        placeholder=' new username'\n                        onChange={this.nameChange} ></input>\n\n\n                        <button className=\"btn btn-info \">\n                            <span className=\"glyphicon glyphicon-check\"\n                            onClick = {this.onClickSave} ></span>\n                        </button>\n\n                        {/*   --  this have to be user history  --   */}\n                    {/* <p> history {this.props.history.join(' - ')} </p> */}\n\n                </div>\n\n            </div>\n        );\n    }\n\n\n}","import React from 'react';\nimport UserAccount from './UserAccount';\n\nexport default class UserLoginContainer extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            usrnameInput: '',\n            passwordInput: '',\n            toggleLog:'disply',\n            username:'',\n            history:[],\n            userPassed:false,\n        };\n\n    }\n\n    usrnameInputChange = (e) => { \n        this.setState({  usrnameInput: e.target.value, });\n    }\n    passwordInputChange = (e) => { \n        this.setState({  passwordInput: e.target.value, });  \n    }\n\n\n    checkUser = (e) => {\n        \n        e.preventDefault();\n        console.log('check user on database ');\n        const userName = this.state.usrnameInput;\n        const userPass = this.state.passwordInput;\n        const Tags = this.state.tags;\n\n        console.log('check user on database ');\n        console.log(' if ', userName);\n\n\n        this.props.UsersBD.map( (item,index)=> {\n\n            if( item.usrname === userName ){\n                console.log('you have account ', item.usrname ) ;\n                if( item.password === userPass ){\n                    console.log(' valid pass ' ) ;\n\n                    this.setState({\n                    toggleLog:'none',\n                    userPassed: true,\n                    username : item.usrname,\n                    history : item.history\n                    })\n                    \n\n                }else{\n                    // Alert\n                    console.log(' not valid pass ' ) ;\n\n                    \n                }\n            }else{\n                // Alert\n                console.log('you do not have account !') ;\n\n            }\n            \n                  \n            });\n    }\n\n     onClickSave = (e) => {\n\n        this.setState({ toggleEdit:'none' }); \n    }\n\n\n\n\n    render() { \n        let userAccout = null;\n\n        if(this.state.userPassed) {\n            userAccout = \n            <UserAccount \n            editUser= {this.props.editUser}\n            username = {this.state.username } \n            history = {this.state.history }  />\n        }\n\n        return ( \n        <div>\n            <form className= {`login-${this.state.toggleLog}`}>\n\n                    <input type='text'\n                        placeholder='usrname'\n                        onChange={this.usrnameInputChange} /><br></br>\n\n                    <input type='text'\n                        placeholder='password'\n                        onChange={this.passwordInputChange} /><br></br>\n                    <button \n                    className=\"btn btn-info glyphicon glyphicon-ok\" \n                    onClick={this.checkUser} > \n                    </button>\n\n                   \n                </form>\n                {userAccout}\n            \n        </div> );\n    }    \n\n}","import React from 'react';\nimport UserAccount from './UserAccount';\n\nexport default class UserRegisterContainer extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            toggleLog:'disply',\n            usrnameInput: '',\n            passwordInput: '',\n            history:['history search'],\n            userPassed:false,\n        };\n\n    }\n\n    usrnameInputChange = (e) => { \n        this.setState({  usrnameInput: e.target.value, });\n        // e.target.defaultValue=''   \n    }\n    passwordInputChange = (e) => { \n        this.setState({  passwordInput: e.target.value, });\n        // e.target.defaultValue=''   \n    }\n\n    addUser = (e) => {\n        \n        e.preventDefault();\n       \n        \n        // const newuser = this.props.UsersBD;\n\n        if( ( this.state.usrnameInput === ''  || this.state.passwordInput === '')  ){\n            // Alert\n            console.log(' you have to fil input ');\n        }else{\n        \n        // Alert\n        console.log('Adding new user to database ');\n\n        this.props.addUser(\n            {'usrname': this.state.usrnameInput ,\n             'password': this.state.passwordInput,\n              'history':this.state.history, \n            });\n        }\n        this.setState({\n            toggleLog:'none',\n            userPassed:true,\n        })\n\n\n    }\n\n    render() { \n        let userAccout = null;\n\n        if(this.state.userPassed) {\n            userAccout = \n            <UserAccount \n            username = {this.state.usrnameInput } \n            history = {this.state.history }  \n            />\n        }\n        return ( \n        <div>\n            <form className= {`login-${this.state.toggleLog}`}>\n\n                    <input type='text'\n                        placeholder='usrname'\n                        onChange={this.usrnameInputChange} />\n\n                        <br></br>\n\n                    <input type='text'\n                        placeholder='password'\n                        onChange={this.passwordInputChange} />\n\n                        <br></br>\n\n                    <button \n                    className=\"btn btn-info glyphicon glyphicon-ok\" \n                    onClick={this.addUser} > \n                    </button>\n                   \n                </form>\n                {userAccout}\n            \n        </div> );\n    }    \n\n}","import React from 'react';\nimport UserLoginContainer from './UserLoginContainer'\nimport UserRegisterContainer from './UserRegisterContainer'\n\nexport default class UsersContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            toggle:'display',\n            toggleLogin:'none',\n            toggleRegister:'none',\n            dataUsers:JSON.parse( localStorage.getItem('users') ),\n         }\n    }\n\n\n    userLoginClicked = (e) => {\n        console.log('history List Div click');\n         if( this.state.toggleLogin === 'none'){\n            this.setState({ \n                toggleLogin:'display', \n                toggle:'none',\n                toggleRegister:'none' }); \n         }\n         else{\n             this.setState({ toggleLogin:'none' }); \n         }\n    }\n\n     userRegisterClicked = (e) => {\n        console.log('history List Div click');\n         if( this.state.toggleRegister === 'none'){\n            this.setState({ \n                toggleRegister:'display',\n                toggleLogin:'none' ,\n                toggle:'none', }); \n         }\n         else{\n             this.setState({ toggleRegister:'none' }); \n         }\n    }\n    addUser = (user) => {\n        this.setState({\n            dataUsers:[...this.state.dataUsers , user]\n        }, () => {\n            localStorage.setItem(\"users\",JSON.stringify( this.state.dataUsers ))\n        });\n    }\n\n    editUser =( oldName , newName)=>{\n        \n        this.state.dataUsers.map( (item)=> {\n\n            if( item.usrname === oldName || oldName === ''  ){\n                 item.usrname = newName ;\n                const update = JSON.stringify( this.state.dataUsers );\n                localStorage.setItem(\"users\", update );\n                \n                this.setState({\n                    dataUsers: JSON.parse( localStorage.getItem('users') ),\n                }, () => {\n                    localStorage.setItem(\"users\",JSON.stringify( this.state.dataUsers ))   \n            });\n        }\n        })\n}\n\n    \n\n    render() { \n        return ( \n        <div>\n\n            <ul className=\"d-inline-flex list-group\">\n\n                <span className={`users-container-${this.state.toggle}`} onClick={this.userLoginClicked } >\n                    Login </span> \n                    \n                <div className= {`user-account-${this.state.toggleLogin}`}>\n                         <UserLoginContainer\n                         UsersBD= {this.state.dataUsers} \n                         editUser= {this.editUser}\n                         /> \n                </div>\n            </ul>  \n\n\n\n            <ul className=\"d-inline-flex list-group\">\n                <span className={`users-container-${this.state.toggle}`} onClick={this.userRegisterClicked} >\n                    Register </span> \n\n                <div className= {`user-account-${this.state.toggleRegister}`}>\n                        <UserRegisterContainer \n                        UsersBD= {this.state.dataUsers}  \n                        addUser= {this.addUser}\n                        />\n                </div>\n            </ul>   \n\n\n        </div> );\n    }\n}\n ","import React from 'react';\nimport axios from \"axios\"\n\nimport HistoryContainer from './HistoryContainer';\nimport SearchResult from './SearchResult';\nimport UsersContainer from'./UsersContainer';\n\n\n// localStorage.clear()\n// localStorage.setItem(\"users\",JSON.stringify([]))\n\n\n// API\n// https://api.iconfinder.com/v3/\n// iconsets?\n// client_id=NvfBiIhJIHYvaAKF125ScaiL5YSZ7B4pE5JYx5slJaZXSYrUYfChDeQIOPBNOPdv\n// &\n//client_secret=kaZCwCWTX2ajcgAZqsdbBqZXljUvyst4WHCamfM70jF1ZNEXFV4vlM2fXBPSJpU4\n// &premium=0\n// &count=100\n \n\nexport default class Main extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            search: [],\n            newItem: '',\n            toggleHistory:'none',\n            toggleUser:'none',\n            data:[],\n\n        };\n    }\n\n   \n\n    getData = (data) => { \n        console.log(' get data from api work!! ')\n        const client_id ='client_id=NvfBiIhJIHYvaAKF125ScaiL5YSZ7B4pE5JYx5slJaZXSYrUYfChDeQIOPBNOPdv';\n        const client_secret = 'client_secret=kaZCwCWTX2ajcgAZqsdbBqZXljUvyst4WHCamfM70jF1ZNEXFV4vlM2fXBPSJpU4';\n       \n       const url = `https://api.iconfinder.com/v3/icons/search?${client_id}&${client_secret}&query=${this.state.newItem}&count=100&premium=0`;\n        console.log(\"URL:'\",url)\n          \n      axios({\n       method: 'get',\n       url: url\n         })\n         .then(res => { \n           console.log( 'Data: ',res.data.icons);\n           \n           this.setState({  data: res.data.icons });\n\n        //    console.log( 'length: ',res.data.icons.length );\n        //    console.log( 'download_url: ',res.data.icons[0].raster_sizes[6].formats[0].preview_url );\n        //    console.log( 'format: ',res.data.icons[0].raster_sizes[6].formats[0].format );\n           \n         })\n         .catch(err => {\n           console.log('ERR',err);\n         });  \n        \n     }\n\n\n    addItem = (e) => {\n        \n        e.preventDefault();\n        console.log('Adding search item to Array Search');\n\n        this.setState({\n            search: [...this.state.search, this.state.newItem],\n            newItem: '',\n        });\n        // e.target.defaultValue=''\n        \n        this.getData(e.target.value);\n        \n\n    }\n\n    inputChange = (e) => { \n        this.setState({  newItem: e.target.value, });\n        // e.target.value=''   \n    }\n\n    closeClick = (e) => {\n        console.log('close ( clear all ) click', e.target);\n        this.setState({ search: [] });\n    }\n\n\n\n    closeItemClick = (item) => {\n        const search = [...this.state.search];\n        const searchIndex = search.indexOf(item);\n\n        console.log('close ( clear item ) click');\n\n        search.splice(searchIndex, 1);\n        this.setState({ search });\n    }\n\n\n    historyListClicked = (e) => {\n        console.log('history List Div click');\n         if( this.state.toggleHistory === 'none'){\n            this.setState({ toggleHistory:'display' }); \n         }\n         else{\n             this.setState({ toggleHistory:'none' }); \n         }\n    }\n\n    userListClicked = (e) => {\n        console.log('history List Div click');\n         if( this.state.toggleUser === 'none'){\n            this.setState({ toggleUser:'display' }); \n         }\n         else{\n             this.setState({ toggleUser:'none' }); \n         }\n    }\n\n    removeData = (oneData) =>{\n        const data = [...this.state.data];\n        const dataIndex = data.indexOf(oneData);\n\n        console.log('remove ( one item from data ) click');\n\n        data.splice(dataIndex, 1);\n        this.setState({ data });\n\n    }\n\n    render() {console.log(this.state.data);\n        return (\n            \n            <div className=\"d-block\">\n                \n                <div className=\"d-flex justify-content-center heder\" >\n\n                <form className=\"form\">\n                    <input type='text'\n                        placeholder='Search'\n                        \n                        onChange={this.inputChange} />\n\n                    <button className=\"btn btn-info\" onClick={this.addItem} > \n                    <span className=\"glyphicon glyphicon-search\"></span>  \n                    </button>\n                   \n                </form>\n\n                <div className=\"d-inline-flex flex-column History\">\n\n                    <button className=\"btn btn-info buttonHistory\"\n                    onClick={ this.historyListClicked }> History </button>\n\n                    <div className= {`HistoryContainer-${this.state.toggleHistory}`}>\n                        <HistoryContainer\n                        onCloseItemClick={this.closeItemClick}\n                        closeClick={this.closeClick}\n                        historyList={this.state.search} />\n                   </div>\n               \n                </div>\n                    \n                    <div className=\"d-inline-flex flex-column user\">\n\n                    <button className=\"btn btn-info \"\n                    onClick={ this.userListClicked }\n                    > \n                    <span className=\"glyphicon glyphicon-user\"></span>  \n                    </button>\n\n                    <div className= {`userContainer-${this.state.toggleUser}`}>\n                        <UsersContainer />\n                        </div>\n               \n             </div>\n                </div> \n\n\n\n                <div className=\"mainResult\">\n                    <h1>  {this.state.data.length} result </h1>\n                    <SearchResult  \n                    DATA= {this.state.data}\n                    onRemoveData={this.removeData}/>\n                </div>\n\n\n\n                \n\n\n\n            </div>\n\n                \n\n\n                \n\n        );\n\n    }\n\n}\n","import React from 'react';\nimport Main from './components/main';\nimport './App.css';\n\nexport default class App extends React.Component{\n\n\n\n  render(){\n  return (\n    <Main />\n  );}\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}